// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

// Outline shader

// Material parameters
float4 _Color;
float4 _LightColor0;
float _EdgeThickness = 1.0;
float4 _MainTex_ST;

// Textures
sampler2D _MainTex;

// Structure from vertex shader to fragment shader
struct v2f
{
	float4 pos : SV_POSITION;
	float2 uv : TEXCOORD0;
};

// Float types
#define float_t  half
#define float2_t half2
#define float3_t half3
#define float4_t half4

// Outline thickness multiplier
#define INV_EDGE_THICKNESS_DIVISOR 0.00285
// Outline color parameters
#define SATURATION_FACTOR 0.6
#define BRIGHTNESS_FACTOR 0.8

// Vertex shader
v2f vert( appdata_base v )
{
	v2f o;
	o.uv = TRANSFORM_TEX( v.texcoord.xy, _MainTex );

	//将顶点从物体空间变换到裁剪空间
	half4 projSpacePos = UnityObjectToClipPos( v.vertex );
	//将法线从物体空间变换到裁剪空间
	half4 projSpaceNormal = normalize( UnityObjectToClipPos( half4( v.normal, 0 ) ) );
	//缩放裁剪空间的法线
	half4 scaledNormal = _EdgeThickness * INV_EDGE_THICKNESS_DIVISOR * projSpaceNormal; // * projSpacePos.w;
	//裁剪空间的法线Z值的偏移
	scaledNormal.z += 0.00001;
	//描边顶点位置 = （裁剪空间顶点向量 + 经过调整的裁剪空间法线）（向量加法）
	o.pos = projSpacePos + scaledNormal;

	return o;
}

// Fragment shader
float4 frag( v2f i ) : COLOR
{
	float4_t diffuseMapColor = tex2D( _MainTex, i.uv );

	//取RGB三分量中最大的分量值为maxChan
	float_t maxChan = max( max( diffuseMapColor.r, diffuseMapColor.g ), diffuseMapColor.b );

	float4_t newMapColor = diffuseMapColor;

	//将maxChan减去1.0 / 255.0，进行调整
	maxChan -= ( 1.0 / 255.0 );
	
	//获取一个0~1之间的调和值
	float3_t lerpVals = saturate( ( newMapColor.rgb - float3( maxChan, maxChan, maxChan ) ) * 255.0 );

	//lerp(a, b, f) = (1− f )∗ a + b∗ f 或a + f ∗(b − a) 
	//调和值 = 在下限SATURATION_FACTOR * newMapColor.rgb和上限newMapColor.rgb之间用lerpVals进行插值
	newMapColor.rgb = lerp( SATURATION_FACTOR * newMapColor.rgb, newMapColor.rgb, lerpVals );
	
	//最终颜色 = float4（（BRIGHTNESS_FACTOR系数 * 调和值.rgb * 纹理颜色.rgb） , 纹理颜色.a） * _Color * _LightColor0
	return float4( BRIGHTNESS_FACTOR * newMapColor.rgb * diffuseMapColor.rgb, diffuseMapColor.a ) * _Color * _LightColor0; 
}
