// Upgrade NOTE: replaced '_Object2World' with 'unity_ObjectToWorld'
// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

// Character skin shader
// Includes falloff shadow

//---------------------------------------------------------
/// CharaSkin for 眼睛、脸、皮肤、睫毛
//---------------------------------------------------------



#define ENABLE_CAST_SHADOWS

// Material parameters
float4 _Color;
float4 _ShadowColor;
float4 _LightColor0;
float4 _MainTex_ST;

// Textures
sampler2D _MainTex;
sampler2D _FalloffSampler;
sampler2D _RimLightSampler;

// Constants
#define FALLOFF_POWER 1.0

#ifdef ENABLE_CAST_SHADOWS

// Structure from vertex shader to fragment shader
struct v2f
{
	float4 pos    : SV_POSITION;
	LIGHTING_COORDS( 0, 1 )
	float3 normal : TEXCOORD2;
	float2 uv     : TEXCOORD3;
	float3 eyeDir : TEXCOORD4;
	float3 lightDir : TEXCOORD5;
};

#else
	
// Structure from vertex shader to fragment shader
struct v2f
{
	float4 pos    : SV_POSITION;
	float3 normal : TEXCOORD0;
	float2 uv     : TEXCOORD1;
	float3 eyeDir : TEXCOORD2;
	float3 lightDir : TEXCOORD3;
};
	
#endif

// Float types
#define float_t  half
#define float2_t half2
#define float3_t half3
#define float4_t half4

// Vertex shader
v2f vert( appdata_base v )
{
	v2f o;
	// 将顶点从物体空间转换到裁剪空间
	o.pos = UnityObjectToClipPos( v.vertex );
	// 准备纹理
	o.uv = TRANSFORM_TEX( v.texcoord.xy, _MainTex );
	// 将法线从物体空间转换到世界空间
	o.normal = normalize( mul( unity_ObjectToWorld, float4_t( v.normal, 0 ) ).xyz );
	
	// ===============Eye direction vector=============
	// 将顶点从物体空间转换到世界空间
	float4_t worldPos =  mul( unity_ObjectToWorld, v.vertex );
	// 视点方向 = normalize（摄像机位置 - 世界空间顶点位置 ）
	o.eyeDir = normalize( _WorldSpaceCameraPos - worldPos );
	// 世界空间光照方向，基于内置函数WorldSpaceLightDir计算
	o.lightDir = WorldSpaceLightDir( v.vertex );

	// ===============shadow=============
	// =============阴影相关==============
	#ifdef ENABLE_CAST_SHADOWS
		// 内置函数TRANSFER_VERTEX_TO_FRAGMENT
		TRANSFER_VERTEX_TO_FRAGMENT( o );
	#endif

	return o;
}

// Fragment shader
float4 frag( v2f i ) : COLOR
{
	// 漫反射采样颜色
	float4_t diffSamplerColor = tex2D( _MainTex, i.uv );

	// ==========Falloff. Convert the angle between the normal and the camera direction into a lookup for the gradient============
	// ==========衰减值。将法线方向和摄像机方向之间的夹角转换为渐变色的一个lookup（从值查表）==========================
	// 法线向量N与视点方向V点积
	float_t normalDotEye = dot( i.normal, i.eyeDir );
	// clamp(x,a,b) - 如果x 值小于a，则返回a；如果x 值大于b，返回b；否则，返回x
	// falloffU（衰减值） = 一个0.02到0.98之间的值
	float_t falloffU = clamp( 1 - abs( normalDotEye ), 0.02, 0.98 );
	// 衰减采样颜色 = FALLOFF_POWER * 从_FalloffSampler纹理中采样颜色值
	float4_t falloffSamplerColor = FALLOFF_POWER * tex2D( _FalloffSampler, float2( falloffU, 0.25f ) );
	// lerp(a, b, f) = (1− f )∗ a + b∗ f 或a + f ∗(b − a) 
	// 结合颜色 = lerp（漫反射采样颜色.rgb ， 衰减采样颜色.rgb * 漫反射采样颜色.rgb ，衰减采样颜色.a ） 
	float3_t combinedColor = lerp( diffSamplerColor.rgb, falloffSamplerColor.rgb * diffSamplerColor.rgb, falloffSamplerColor.a );

	// =======================Rimlight======================
	// =======================边缘光======================
	// 边缘光点积 = saturate（0.5 * (dot（世界空间法线N，光线方向I）+ 1.0))
	float_t rimlightDot = saturate( 0.5 * ( dot( i.normal, i.lightDir ) + 1.0 ) );
	// falloffU（衰减值） = saturate(边缘光点积 * falloffU（衰减值） )
	falloffU = saturate( rimlightDot * falloffU );
	// falloffU = saturate( ( rimlightDot * falloffU - 0.5 ) * 32.0 );
	falloffU = tex2D( _RimLightSampler, float2( falloffU, 0.25f ) ).r;
	// 漫反射光照颜色 = 漫反射纹理采样颜色.rgb * 0.5
	float3_t lightColor = diffSamplerColor.rgb * 0.5; // * 2.0;
	// 结合颜色 += falloffU（衰减值）* 漫反射光照颜色
	combinedColor += falloffU * lightColor;

	// ===========================shadows=======================
	// ===========================阴影=======================
#ifdef ENABLE_CAST_SHADOWS
	// Cast shadows
	// 阴影颜色 = _ShadowColor.rgb * 结合颜色
	float3_t shadowColor = _ShadowColor.rgb * combinedColor;
	// 衰减值 = saturate（2.0 * Unity内置函数LIGHT_ATTENUATION(i) - 1.0）
	float_t attenuation = saturate( 2.0 * LIGHT_ATTENUATION( i ) - 1.0 );
	//lerp(a, b, f) = (1− f )∗ a + b∗ f 或a + f ∗ (b − a) 
	// 结合颜色 = lerp（阴影颜色 ，结合颜色 ，衰减值 ）
	combinedColor = lerp( shadowColor, combinedColor, attenuation );
#endif

	//最终的颜色 = float4（结合颜色（rgb），不透明度（a））* _Color * _LightColor0
	return float4_t( combinedColor, diffSamplerColor.a ) * _Color * _LightColor0;
}
